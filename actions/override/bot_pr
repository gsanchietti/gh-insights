#!/usr/bin/python3
"""
This script fetches all open pull requests for specified GitHub organizations and generates a markdown report categorizing
them into stale and active pull requests.
Include only PRs made by bots.
"""

import os
import requests
from datetime import datetime, timezone, timedelta
import sys

# Function to get all repositories for the organization using pagination
def get_repositories(org, token):
    print(f"Fetching repositories for organization: {org}", file=sys.stderr)
    url = f'https://api.github.com/orgs/{org}/repos?per_page=900'
    headers = {'Authorization': f'token {token}'}
    repos = []
    while url:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        repos.extend(response.json())
        url = response.links.get('next', {}).get('url')
    if not repos:
        print(f"No repositories found for organization: {org}", file=sys.stderr)
        sys.exit(1)
    return repos

# Function to get all open pull requests for a repository
def get_open_pull_requests(repo, token):
    print(f"Fetching open pull requests for repository: {repo}", file=sys.stderr)
    url = f'https://api.github.com/repos/{repo}/pulls?state=open&per_page=900'
    headers = {'Authorization': f'token {token}'}
    pull_requests = []
    while url:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        pull_requests.extend(response.json())
        url = response.links.get('next', {}).get('url')
    return pull_requests

# Main function
def main():
    # Read GitHub token from environment variable
    GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
    if not GITHUB_TOKEN:
        print("Error: Please set the GITHUB_TOKEN environment variable.")
        sys.exit(1)

    if len(sys.argv) < 2:
        print("Usage: python script.py <organization1> <organization2> ...")
        sys.exit(1)

    orgs = sys.argv[1:]
    stale_threshold = datetime.now(timezone.utc) - timedelta(days=30)
    results = {}

    for org in orgs:
        print(f"Processing organization: {org}", file=sys.stderr)
        repositories = get_repositories(org, GITHUB_TOKEN)
        org_prs = []

        for repo in repositories:
            repo_name = repo['full_name']
            pull_requests = get_open_pull_requests(repo_name, GITHUB_TOKEN)

            for pr in pull_requests:
                pr_created_at = datetime.strptime(pr['created_at'], '%Y-%m-%dT%H:%M:%SZ').replace(tzinfo=timezone.utc)
                is_stale = pr_created_at < stale_threshold
                # include only bot PRs
                if pr['user']['login'] in ['weblate', 'nethbot'] or '[bot]' in pr['user']['login']:
                    if not pr['draft']:
                        org_prs.append({
                            'repo': repo_name,
                            'title': pr['title'],
                            'url': pr['html_url'],
                            'created_at': pr['created_at'],
                            'stale': is_stale,
                            'author': pr['user']['login'],
                            'reviewers': [reviewer['login'] for reviewer in pr.get('requested_reviewers', [])]
                        })
        
        results[org] = org_prs

    generate_markdown_report(results)

def generate_markdown_report(results):
    # Hugo front matter
    report = "+++\n"
    report += f"title = 'Open Pull Requests by Bots'\n"
    report += f"date = {datetime.now().strftime('%Y-%m-%d')}\n"
    report += "+++\n\n"

    for org, prs in results.items():
        report += f"## Organization: {org}\n\n"
        if not prs:
            report += "No open pull requests found.\n\n"
        else:
            prs_by_repo = {}
            for pr in prs:
                repo = pr['repo']
                if repo not in prs_by_repo:
                    prs_by_repo[repo] = []
                prs_by_repo[repo].append(pr)

            for repo, repo_prs in prs_by_repo.items():
                report += f"### {repo} {len(repo_prs)} \n\n"

                for pr in repo_prs:
                    reviewers = ', '.join(pr['reviewers']) if pr['reviewers'] else 'None'
                    if reviewers == 'None':
                        marker = ":eyes:"
                    else:
                        marker = ""
                    if pr['stale']:
                        stale = ":zzz:"
                    else:
                        stale = ""
                    report += f"- {marker} {stale} **[{pr['title']}]({pr['url']})** by *{pr['author']}* - Reviewers: *{reviewers}* - Created at: {pr['created_at']}\n"
                report += "\n"

    print(report)

if __name__ == "__main__":
    main()
